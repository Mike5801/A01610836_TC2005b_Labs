<%- include('includes/header.ejs') %>
    <h1>Pregunta del laboratorio 12</h1>
    <br><strong>¿Qué otros templating engines existen para node?</strong><br>
    <ul>
        <li>Pug</li>
        <li>marko</li>
        <li>Eta</li>
        <li>Handlebars</li>
        <li>nunjucks</li>
        <li>squirrely</li>
        <li>dot</li>
        <li>vash</li>
    </ul>
    <p>(Openbase, s.f.)</p>
    <h1>Preguntas del laboratorio 13</h1>
    <br><strong>¿Qué beneficios encuentras en el estilo MVC?</strong><br>
    <p>El código queda mucho más limpio y se tiene solo una funcionalidad por cada archivo de código, es decir, no se encuentra estructura con lógica en un mismo archivo, permitiendo tener un código lasaña por capas y no un código spaghetti donde se tienen diferentes funcionalidades en un mismo archivo (vista, lógica y estructura en uno mismo)</p>
    <br><strong>¿Encuentras alguna desventaja en el estilo arquitectónico MVC?</strong><br>
    <p>Como todo está dividido en diferentes archivos, debugear el código y encontrar en dónde se encuentran los errores es un trabajo muy complicado, ya que no hace referencia directa a un mismo archivo. Lo mismo sucede en los casos donde se requiera actualiar algún módulo completo, en lugar de hacerlo en un solo archivo, se tendrían que buscar las secciones a cambiar en todos los diferentes módulos o carpetas</p>
    <h1>Preguntas del laboratorio 18</h1>
    <br><strong>¿Qué otras formas de autenticación existen?</strong><br>
    <dl>
        <dt>Two-factor authentication (2FA):</dt>
        <dd>Requiere una contraseña y de poseer específicamente un objeto físico para tener acceso a la red</dd>
        <dt>Token authentication</dt>
        <dd>Utilizan un dispositivo físico que se encarga de la generación de un token para aplicar el 2FA</dd>
        <dt>Biometric authenticaction:.</dt>
        <dd>Requiere de un rasgo físico del usuario para poder identificarlos, pueden ser huellas, retina o iris del ojo, voz, cara, entre otros</dd>
        <dt>Transaction authentication:</dt>
        <dd>Compara las características digitales del usuario con lo que el sistema sabe de él y busca las discrepancias (Dirección ip de la ubicación diferente al usual))</dd>
    </dl>
    <p>(N-Able, 2019).</p>
    <h1>Preguntas del laboratorio 17</h1>
    <br><strong>¿Qué ventajas tiene escribir el código SQL únicamente en la capa del modelo?</strong>
    <p>Tiene la ventaja de que no se maneja información de la base de datos fuera de esta capa, permitiendo un mayor nivel de seguridad, y al mismo tiempo, permite tener la información separada de toda la estructura de la página web. </p>
    <br><strong>¿Qué es SQL injection y cómo se puede prevenir?</strong>
    <p>Es introducir como entrada código SQL que pueda modificar la información guardada en la base de datos. Se puede prevenir al no específicar qué parámetros va a recibir de manera directa, sino haciendo una referencia a ellas después de haber escrito el código SQL</p>
    <h1>Preguntas del laboratorio 19</h1>
    <br><strong>¿En qué consiste el control de acceso basado en roles?</strong>
    <p>Consiste en un sistema de seguridad en el cual se determinan las diferentes funcionalidades y vistas de los usuarios dependiendo de los roles que tiene cada uno</p>
    <br><strong>Investiguen y describan 2 sistemas, uno que aplique RBAC y uno que no. Realicen un análisis de las ventajas y desventajas de cada uno con respecto al control de acceso.</strong>
    <p>Además del RBAC, existe otro modelo de seguridad llamada ABAC (Attribute-Based Access Control), el cual permite también tener un control de lo que una persona puede realizar, sin embargo, éste no se basa en la existencia de los roles, sino del acceso del usuario a recursos dentro del sistema desde el ambiente en el que se está trabajando. Es decir, ABAC se basa directamente en el usuario que está trabajando en el sistema, limitando los archivos a los cuales puede acceder dependiendo de su tipo, creador, entre otros, o directamente desde el lugar, hora, día o quién está intentando acceder a esos archivos. A pesar de que ambos son modelos de seguridad, cada uno tiene sus propios fuertes. RBAC tiene la ventaja de que es muy simple de implementar y muy seguro en su uso, sin embargo, al ser un modelo sencillo, no es muy fácil generar la granularidad que se necesita para algunos sistemas, por lo que se termina generando una gran cantidad de reglas, roles y permisos. Esta desventaja lo cubre ABAC, ya que te permite tener un control específico del acceso a los diferentes recursos de un sistema, sin embargo, una de las desventajas es que requiere mucho tiempo y trabajo de implementación, debido a que busca tener esa granularidad que RBAC no provee. Aunado a lo anterior, si el modelo está mal implementado, se requiere una gran cantidad de trabajo para poder corregirlo. Ambos modelos de seguridad son buenos dependiendo de qué tipo de aplicación o sistema se esté realizando, si se trata de un trabajo que no requiere tener un control muy específico, RBAC es una de las mejores opciones, ya que permite modelar de manera correcta el caso, sin embargo, cuando se trata de un control específico, es más recomendable utilizar ABAC. (okta, s.f.)</p>
    <h1>Preguntas del laboratorio 24</h1>
    <br><strong>¿Qué importancia tiene AJAX en el desarrollo de RIA's (Rich Internet Applications?</strong>
    <p>La importancia de AJAX en el desarrollo de RIA's está principalmente en el enfoque con el usuario, ya que permite generar de manera más interactiva la información para el usuario, además de que incrementa la velocidad de respuesta porque no es necesario cargar nada desde la aplicación, reduciendo así el ancho de banda. (Napier University, 2008; Palacioes E., 2008)</p>
    <br><strong>¿Qué implicaciones de seguridad tiene AJAX? ¿Dónde se deben hacer las validaciones de seguridad, del lado del cliente o del lado del servidor?</strong>
    <p>AJAX tiene algunas cuestiones de seguridad, especialmente por el aspecto de las inyecciones de código SQL en las peticiones GET y POST. Las validacioens se tienen que hacer del lado del servidor, ya que al ser una respuesta asincrona, ya no es necesario mandar una nueva petición y recibir una nueva respuesta para desplegar información en las vistas. (Napier University, 2008)</p>  
    <br><strong>¿Qué es JSON?</strong>
    <p>JSON (JavaScript Object Notation) es un formato de intercambio de datos.</p>
    <footer>
        <h3>Referencias</h3>
        <ul>
            <li>N-Able. (2019). Common Network Authentication Methods. Recuperado de: <a href="https://www.n-able.com/blog/network-authentication-methods" target="_blank">https://www.n-able.com/blog/network-authentication-methods</a></li>
            <li>Napier University. (2008). AJAX: Rich Internet Applications. Recuperado de: <a href="https://www.upriss.org.uk/awt/lec7.pdf">https://www.upriss.org.uk/awt/lec7.pdf</a></li>
            <li>Openbase. (s.f.). 10 Best Node.js HTML Templeating Engine Librarires. Recuperado de: <a href="https://openbase.com/categories/js/best-nodejs-html-templating-engine-libraries" target="_blank">https://openbase.com/categories/js/best-nodejs-html-templating-engine-libraries</a></li>
            <li>okta (s.f.). RBAC vs. ABAC: Definitions & When to Use. Recuperado de: <a href="https://www.okta.com/identity-101/role-based-access-control-vs-attribute-based-access-control/">https://www.okta.com/identity-101/role-based-access-control-vs-attribute-based-access-control/</a></li>
            <li>Palacios E.. (2008). Aplicaciones Ricas en Internet (RIA). Un enfoque de refactorización. Recuperado de: <a href="http://sedici.unlp.edu.ar/bitstream/handle/10915/3999/Documento_completo__.pdf?sequence=">http://sedici.unlp.edu.ar/bitstream/handle/10915/3999/Documento_completo__.pdf?sequence=</a></li>
        </ul>
    </footer>
<%- include('includes/footer.ejs') %>